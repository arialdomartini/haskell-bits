* Chapter 5 - Creating And Structuring Haskell Projects

** Installing
- check if Cabal is installed

  #+begin_src shell
    $ cabal --version
    cabal-install version 3.10.2.1
    compiled using version 3.10.2.1 of the Cabal library 
  #+end_src

- I installed Cabal with =ghcup=

- Most likely I have installed =ghcup= with =pacman= from the AUR:

  #+begin_src shell
    $ yay -Qs ghcup
    local/ghcup-hs-bin 0.1.20.0-1
    an installer for the general purpose language Haskell
  #+end_src

- Find out which version of Cabal is installed and enabled with:

  #+begin_src shell
    $ ghcup tui
  #+end_src

** Basic use of Cabal
- Cabal
  It can be used for
  - package management
  - dependency management
  - building project
  - running your program

** Installing libraries and applications
#+begin_src shell
  $  cabal update
  Downloading the latest package list from hackage.haskell.org
  Package list of hackage.haskell.org has been updated.
  The index-state is set to 2024-02-24T09:38:29Z.
  To revert to previous state run:
      cabal v2-update 'hackage.haskell.org,2024-01-04T21:59:02Z'
#+end_src

To install applications:

#+begin_src shell
  $  cabal install hello
  Resolving dependencies...
  Build profile: -w ghc-9.8.1 -O1
  In order, the following will be built (use -v for more details):
   - hello-1.0.0.2 (exe:hello) (requires build)
  Starting     hello-1.0.0.2 (all, legacy fallback)
  Building     hello-1.0.0.2 (all, legacy fallback)
  Installing   hello-1.0.0.2 (all, legacy fallback)
  Completed    hello-1.0.0.2 (all, legacy fallback)
  Symlinking 'hello' to '/home/arialdo/.local/bin/hello'
#+end_src

The book states that applications are installed in =~/.cabal/bin=, but this does not seem the case on my box.

Instead, applications are installed in:

 #+begin_src shell
 ~/.local/state/cabal/store/ghc-9.8.1
 #+end_src

 and then symlinked to:

 #+begin_src shell
   ~/.local/bin/
 #+end_src

 Cabal does not offer a way to uninstall applications.

** Creating a Project
Use =cabal init= then follow the interactive wizard:

#+begin_src shell
  $ mkdir example
  $ cd example
  $ cabal init
  $ ls
  app/  CHANGELOG.md  example.cabal  LICENSE
  $ cabal run
  Resolving dependencies...
  Build profile: -w ghc-9.8.1 -O1
  In order, the following will be built (use -v for more details):
   - example-0.1.0.0 (exe:example) (first run)
  Configuring executable 'example' for example-0.1.0.0..
  Preprocessing executable 'example' for example-0.1.0.0..
  Building executable 'example' for example-0.1.0.0..
  [1 of 1] Compiling Main             ( app/Main.hs,   /home/arialdo/prg/haskell/effective-haskell/chapter-5/example/dist-news  tyle/build/x86_64-linux/ghc-9.8.1/example-0.1.0.0/x/example/build/examp  le/example-tmp/Main.o )
  [2 of 2] Linking   /home/arialdo/prg/haskell/effective-haskell/chapter-5/example/dist-news  tyle/build/x86_64-linux/ghc-9.8.1/example-0.1.0.0/x/example/build/examp  le/example
Hello, Haskell!
#+end_src


- PVP
  PVP stands for Package Versionining Policy


** Stanzas and modules
=default-language= needs to be specified in each stanza, otherwise a warning (not an error!) will be emitted and the module will not be found:

#+begin_src shell
  Warning: Packages using 'cabal-version: >= 1.10' and before 'cabal-version:
  3.4' must specify the 'default-language' field for each component (e.g.
  Haskell98 or Haskell2010). If a component uses different languages in
  different modules then list the other ones in the 'other-languages' field.
#+end_src

